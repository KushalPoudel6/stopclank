CREATE SCHEMA api;

CREATE TABLE api.users (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	username TEXT NOT NULL,
	password TEXT NOT NULL,
	reverse_string BOOLEAN NOT NULL DEFAULT FALSE
);

INSERT INTO api.users (username, password) VALUES
	('shaco', '123'), ('clone', '456');


/* TODO: remove sessions after time expires */
CREATE TABLE api.sessions (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	session_id TEXT NOT NULL,
	username TEXT NOT NULL
);

/* If username and password match those of an existing user, create a session and return true */
/* On success, session_id is sent as a cookie */
CREATE FUNCTION api.login(login_username TEXT, login_password TEXT)
RETURNS BOOLEAN AS $$
DECLARE
	success BOOLEAN;
	new_session_id UUID;
BEGIN
	success := EXISTS(SELECT * FROM users WHERE username = $1 AND password = $2);
	IF success THEN
		new_session_id := gen_random_uuid();
		INSERT INTO api.sessions (session_id, username) VALUES (new_session_id, $1);
		/* TODO: Configure cookie expiration */
		SELECT set_config('response.headers', format('[{"Set-Cookie": "session_id=%s"}]', new_session_id), true);
	END IF;
	RETURN success;
END;
$$ LANGUAGE plpgsql;

CREATE ROLE web_anon NOLOGIN;
GRANT USAGE ON SCHEMA api TO web_anon;
GRANT SELECT, UPDATE(reverse_string) ON api.users TO web_anon;
GRANT INSERT ON api.sessions TO web_anon;
GRANT web_anon TO authenticator;
